Kernel command line: -q -mlfqs run mlfqs-block
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  130,867,200 loops/s.
Boot complete.
Executing 'mlfqs-block':
(mlfqs-block) begin
(mlfqs-block) Main thread acquiring lock.
(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
(mlfqs-block) Block thread spinning for 20 seconds...
(mlfqs-block) Block thread acquiring lock...
(mlfqs-block) Main thread spinning for 5 seconds...
(mlfqs-block) Main thread releasing lock.
(mlfqs-block) Block thread should have already acquired lock.
(mlfqs-block) end
(mlfqs-block) ...got it.
Interrupt 0x0e (#PF Page-Fault Exception) at rip=80042091ae
 cr2=0000000000000008 error=               0
rax 000000000000000a rbx 0000000000204400 rcx 00000080040b8000 rdx 000000000000001f
rsp 0000008004000f08 rbp 0000008004000f70 rsi 000000000000800f rdi 0000000000000001
rip 00000080042091ae r8 0000008004000e5c  r9 0000008004216c5b r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200002
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213973 0x8004208dae 0x8004209160 0x8004206636 0x8004206783 0x8004206120.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 3032 ticks
Thread: 499 idle ticks, 2533 kernel ticks, 0 user ticks
Console: 1