Kernel command line: -q run priority-donate-sema
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  156,262,400 loops/s.
Boot complete.
Executing 'priority-donate-sema':
(priority-donate-sema) begin
(priority-donate-sema) Thread L acquired lock.
Interrupt 0x0e (#PF Page-Fault Exception) at rip=8004207ca3
 cr2=0000008000000018 error=               2
rax 0000008000000000 rbx 0000000000000000 rcx 0000000000000000 rdx 0000000000000024
rsp 0000008004236f50 rbp 0000008004236f70 rsi 0000008004234048 rdi 0000008004236068
rip 0000008004207ca3 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000206
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x800421388a 0x8004208d4a 0x80042090fc 0x800420a216 0x8004218c2f 0x800420750c.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 25 ticks
Thread: 0 idle ticks, 25 kernel ticks, 0 user ticks
Console: 1